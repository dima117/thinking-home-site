@{
	ViewBag.Title = "UI (пользовательский интерфейс) для плагинов";
}

<div class="row">
	<div class="col-md-12">
		<h1>UI (пользовательский интерфейс) для плагинов</h1>
		<p>
			Как мы видели в разделе о разработке плагинов, стандартный плагин ListenerPlugin дает возможность
			обрабатывать HTTP запросы (возвращать на клиент файлы из ресурсов или данные в JSON).
			Еще один стандартный плагин WebUIPlugin реализует веб-интерфейс системы.
		</p>
		<p>
			Веб-интерфейс представляет собой что-то вроде панели управления вашим домом. Он состоит из разделов,
			причем каждый плагин может содержать собственные разделы и они автоматически будут отображаться
			в интерфейсе. Все разделы делятся на 2 группы: <em>системные</em> (различные настройки, например, раздел
			сценариев) и <em>пользовательские</em> (разделы, с которыми пользователи работают в повседневной
			жизни, например, "прогноз погоды" и "будильники").
		</p>
		<div class="row">
			<div class="col-md-6">
				<img class="ths-image img-responsive" src="~/Content/images/common-pages.png"
					 alt="Список пользовательских разделов" title="Список пользовательских разделов" />
			</div>
			<div class="col-md-6">
				<img class="ths-image img-responsive" src="~/Content/images/system-pages.png"
					 alt="Список системных разделов" title="Список системных разделов" />
			</div>
		</div>
		<p>
			Кроме этих "рабочих" разделов имеется еще один специальный раздел — "рабочий стол"
			(он же "стартовая страничка"). Там находятся "элементы стартовой страницы" — небольшие панели,
			которые отображают полезную информацию. При клике на них происходит переход в какой-либо раздел
			или выполняется действие. Стартовая страница (как и весь остальной интерфейс) корректно отображается
			как на больших экранах, так и на небольших экранах мобильных устройств.
		</p>
		<div class="row">
			<div class="col-md-3">
				<img class="ths-image img-responsive" src="~/Content/images/start-page-small.png"
					 alt="Стартовая страница на маленьком экране" title="Стартовая страница на маленьком экране" />
			</div>
			<div class="col-md-9">
				<img class="ths-image img-responsive" src="~/Content/images/start-page-large.png"
					 alt="Стартовая страница на большом экране" title="Стартовая страница на большом экране" />
			</div>
		</div>
		<p>
			Технически, веб-интерфейс представляет собой модульное одностраничное приложение на основе
			<a href="http://marionettejs.com" target="_blank">marionette.js</a>. Загрузка модулей
			происходит по мере необходимости с помощью <a href="http://requirejs.org" target="_blank">require.js</a>.
			Для визуальной части используется <a href="http://getbootstrap.com" target="_blank">Twitter Bootstrap</a>.
		</p>
		<h2>Добавление нового раздела</h2>
		<p>
			Любой раздел системы - это небольшая программа на языке JavaScript. Она описывает, что именно
			должен видеть пользователь на экране и какие действия должны быть выполнены, когда пользователь
			взаимодействует с элементами интерфейса.
		</p>
		<p>
			Для добавления нового раздела в систему необходимо в проекте вашего плагина создать js файл,
			который будет содержать js-код раздела. Веб-интерфейс загружает разделы через
			<a href="http://requirejs.org" target="_blank">require.js</a>,
			поэтому для определения раздела используйте функцию <code>define</code> (т.е. каждый раздел -
			это отдельный модуль в терминах require.js).
		</p>
		<pre>
define(
	['app', 'marionette'],
	function (application, marionette) {
		var module = {
		<strong>start</strong>: function () {
				alert("module started!");
			}
		};
		return module;
	});
</pre>
		<p>
			Как видите, функция <code>define</code> принимает два параметра:
		</p>
		<ol>
			<li>Массив зависимостей - содержит имена модулей, от котрых зависит ваш модуль.</li>
			<li>
				Функция инициализации - будет вызвана один раз, при
				загрузке вашего модуля. Она должна возвращать объект, представляющий
				ваш модуль.
			</li>
		</ol>
		<p>
			Каждый модуль из списка зависимостей будет передан как входной параметр в функцию
			инициализации. В примере указано две зависимости: 'app' - это предопределенное имя
			основного модуля приложения (например, с его помощью можно отображать информацию
			на экране), 'marionette' - это предопределенное имя модуля библиотеки
			<a href="http://marionettejs.com" target="_blank">marionette.js</a>
			(там содержатся средства, облегчающие разработку пользовательского интерфейса).
		</p>
		<p>
			Для того, чтобы модуль мог быть использован веб-интерфейсом, необходимо, чтобы он
			содержал метод с названием <strong>start</strong>. По сути, когда пользователь
			нажимает на ссылку перехода в какой-либо раздел, система загружает js-файл раздела
			при помощи require.js, далее вызывается функция инициализации (если это не было
			сделано ранее) и у объекта, полученного из функции инициализации, вызывается метод
			<strong>start</strong>.
		</p>
		<p>
			В приведенном выше примере модуль ничего не отображает на странице. Он просто
			выдает пользователю alert с текстом "module started!".
		</p>

		<p>
			Далее необходимо настроить загрузку js-файла раздела в браузер. Для этого в свойствах файла
			укажите для параметра <em>Build action</em> значение <em>EmbeddedResource</em> и задайте
			URL для файла.
		</p>
		<p>
			Для того, чтобы указать URL, пометьте свой плагин атрибутом <code>ThinkingHome.Plugins.WebUI.Attributes.AppSection</code>
			из сборки <code>ThinkingHome.Plugins.WebUI</code> (если вы еще не добавили ее к проекту, самый простой способ сделать это - набрать в консоли
			Nuget Package Manager <kbd>Install-Package ThinkingHome.Plugins.WebUI</kbd>)
		</p>
		<pre>
[Plugin]
[AppSection(<strong>"My plugin"</strong>,		// название рездела
	<strong>SectionType.Common</strong>,		// тип раздела
	<strong>"/my-plugin/my-file.js"</strong>,	// URL
	<strong>"ThinkingHome.Plugins.MyPlugin.Resources.my-file.js"</strong>)]
public class MyPlugin : PluginBase
{
	...
}
</pre>
		<p>
			Кроме URL и пути к файлу ресурса, в параметрах атрибута <code>[AppSection]</code>
			необходимо указать название раздела и его тип ("пользовательский" или "системный"). После этого ссылка на раздел автоматически
			добавится в нужный список разделов.
		</p>
		<p>
			<img class="img-responsive ths-image" src="~/Content/images/section-in-list.png" />
		</p>
		<h2>Отображение данных на странице</h2>
		<p>
		</p>
		<h2>События</h2>
		<p>
		</p>
		<h2>Запросы к серверу</h2>
		<p>
		</p>
		<h2>Элементы рабочего стола</h2>
		<p>
		</p>
		<h3>Добавление на рабочий стол</h3>
		<p>
		</p>
		<h3>Иконки</h3>
		<p>
		</p>
		<h3>Действия</h3>
		<p>
		</p>
		<h2>Модули, подключенные по умолчанию</h2>
		<p>
		</p>
	</div>
</div>

