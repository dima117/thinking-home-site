@{
	ViewBag.Title = "Сценарии";
	ViewBag.Name = "Scripts";
}

<div class="row">
	<div class="col-md-12">
		<h1>Сценарии</h1>
		<p>
			Сценарии - это небольшие программы, которые выполняются на стороне
			сервиса автоматизации и могут управлять домашними устройствами, вызывая команды
			плагинов. Сценарий можут быть выполнен при наступлении определенного события
			в системе или может быть вызван из другого сценария. Возможность работы со 
			сценариями обеспечивает специальный плагин "ThinkingHome.Plugins.Scripts".
		</p>
		<p>
			Для написания сценариев используется язык Java Script. В сценариях доступны все
			стандартные 
			средства языка, а также объект <code>host</code>, предоставляющий доступ к инфраструктуре
			сервиса автоматизации и возможностям плагинов. С его помощью можно писать
			сообщения в лог, вызывать команды плагинов и запускать другие сценарии.
		</p>
		<p>
			Добавлять/удалять сценарии и редактировать их текст можно при помощи веб-консоли.
			Кнопка "Scripts" в главном меню открывает список всех скриптов в системе.
			Для редактирования скрипта кликните на его название. Чтобы запустить скрипт вручную,
			кликните на кнопку "Run".
		</p>
		<h3>Логирование</h3>
		<p>
			Логирование - важный инструмент, т.к. с его помощью можно получить информацию о
			ходе выполнения сценариев (например, это может быть нужно при их отладке). Данные,
			которые логируются в сценариях, сохраняются в лог плагина "ThinkingHome.Plugins.Scripts".
		</p>
		<p>
			Для записи в лог информационных сообщений используйте метод host.logInfo:
			<code>host.logInfo("Hello, world!")</code>.
			<br />
			Для записи в лог сообщения об ошибке используйте метод host.logError:
			<code>host.logError("plugin is not found!")</code>.<br />
		</p>
		<p>
			Оба метода в качестве первого параметра принимают текст сообщения, а в качестве
			последующих параметров -
			его аргументы. Места добавления аргументов в сообщении можно задать при помощи синтаксиса
			<code>"{1}"</code>,
			где "1" - это номер аргумента (номера начинаются с 0, аналогично методу 
			string.Format в C#).<br />
			Например, добавить в сообщение значение переменных x и y, можно примерно так:	
			<code>host.logError("{0} + {1} = 100500", x, y)</code> (при x = 2 и y = 7 в лог
			будет записана 
			строка "2 + 7 = 100500").
		</p>
		<h3>Вызов методов плагинов из сценариев</h3>
		<p>
			Для работы с плагинами используйте метод объекта host <code>host.getPlugin("plugin alias")</code>.
			Он возвращает объект-обертку над плагином. С его помощью можно вызывать команды
			плагина	(при помощи метода  <code>executeMethod</code>). 
			Метод executeMethod в качестве первого аргумента принимает название метода плагина,
			а в качестве последующих аргументов - его параметры.
		</p>
		<p>
			Например, чтобы при помощи usb-адаптера noolite выключить свет в 3 канале, нужно
			использовать примерно такой скрипт:
		</p>
		<pre>
	var noolitePlugin = host.getPlugin("noolite");
	noolitePlugin.executeMethod("setLevel", 3, 0);</pre>
		<p>
			В сценариях доступны не все методы плагинов, а только те, к которым разрешен доступ
			из сценариев. Список методов плагинов, которые можно использовать в сценариях, 
			смотрите в документации к плагинам.
		</p>
		<h3>Подписка на события</h3>
		<p>
			В системе можно настроить автоматический запуск скриптов при наступлении определенных событий.
			Например, срабатывание датчика движения - событие, нажатие на кнопку - тоже. События генерируются
			плагинами.
		</p>
		<p>
			Данные о подписке сценариев на события плагинов хранятся в системной БД в специальной таблице.
			Там указано, какой скрипт должен выполняться при наступлении определенных событий. Каждое событие
			имеет название плагина, который его генерирует и название события. Самый легкий способ редактирования
			подписок на события - через веб-консоль.
		</p>
		<p>
			<img style="margin: 40px auto;" src="~/Content/img/event-editor.png" class="img-responsive"/>
		</p>
		<p>
			События могут иметь параметры, значения которых будут доступны внутри запускаемых сценариев.
			Напрмиер, событие "получена команда с адаптара nooLite RX1164" будет иметь параметры: 
			<em>тип команды</em>, <em>номер канала</em>, <em>данные</em>. Пример обработки параметров сценария, 
			переденных извне, будет приведен позже.
		</p>
		<p>
			Обратите внимание, в списке событий для подписки отображаются не все события плагинов,
			а только те, к которым плагины разрешили доступ для сценариев. Более подробную информацию о доступных
			событиях смотрите в документации к плагинам. 
		</p>
		<h3>Запуск других сценариев</h3>
		<p>
			Иногда при выполнении сценария может потребоваться запустить другой сценарий. Например,
			сценарий, присматривающий за домом в ваше отсутствие, может запускать сценарий <em>полива цветов</em>
			и сценарий <em>имитации присутствия</em> (имитация присутствия - в комнатах на некоторое время
			иногда включается свет, как будто дома кто-то есть).
		</p>
		<p>
			Для запуска сценария используйте метод <code>runScript</code> объекта <code>host</code>. В качестве
			первого аргумента необходимо передать название запускаемого сценария. Остальные аргументы -
			будут переданы в запускаемый сценарий как входные параметры.
		</p>
		<p>
			Например, следующий код запустит сценарий с именем "myScript" и передаст ему 3 параметра: 
			<code>'qwrqwrqwr22222'</code> (строка), <code>12355</code> (целое число), <code>true</code> (логическое значение).
		</p>
		<pre>
	host.runScript('myScript', 'qwrqwrqwr22222', 12355, true);
</pre>
		<h3>Обработка параметров</h3>
		<p>
			Как мы видели выше, при запуске сценария ему могут быть переданы дополнительные параметры. 
			Внутри сценария можно получить их значения через массив <code>arguments</code>. Ниже приведен 
			пример сценария, который записывает в лог значения всех переданных ему параметров.
			<pre>
	host.logInfo("length = {0}", arguments.length);

	for(var i = 0; i < arguments.length; i++)
	{
		host.logInfo("arguments[{0}] = {1}", i, arguments[i]);
	}
</pre>
		</p>
	</div>
</div>

